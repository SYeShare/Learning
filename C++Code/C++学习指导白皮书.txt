Difference between pointer and reference?

i++, ++i, which one is better?

Why use virtual destructor?

What is the signature of a copy constructor/ assignment operator?

How to specialize a class template?

What are the four types of casts in C++? Usage?

etc


准备：一些常用c语言基础：指针、数组、字符串数组、int、size_t、char、signed/unsigned、const

第一层，基本常用结构：std::string、std::map、std::vector、ios

第二层，自定义对象：struct、class、继承、重载、多态

第三层，进一步抽象对象：虚继承

第四层，：static变量、static函数、static class成员、static class函数

第五层，程序设计：有限状态机、单例、命令模式、function、lambda

第六层，网络基础：socket、std::shared_ptr、std::unique_ptr、std::array

第七层，高级网络开发：asio

第八层，并发：packaged_task + future + thread、promise、lambda

第九层，静态优化：constexpr、templete

第十层，渐入佳境：随意发挥

作者：王旭竞
链接：https://www.zhihu.com/question/23447320/answer/241462473
来源：知乎


作者：蓝色
链接：https://www.zhihu.com/question/23447320/answer/24657827
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




由于我大一也陷入过迷茫，也走过一些弯路，那时候学不会直接记忆代码之类的事情我都干过，
我也希望我的这些经验可以对你有所帮助。首先是一本好的C++书籍（Accelerated C++， C++ Primer），
然后以及尽量多的完成书籍的习题，可以帮助完成C++语法的学习。虽然前面的书籍涵盖了标准库，但是不够完善
，这个时候你可以选择在线查阅C++标准库这种泛型的学习方式，也可以选择阅读《C++标准库》的方式进行学习。
通过这样的步骤，你应该可以完成C++的初步学习了。

然后，由于C++是一门系统级语言，我想你需要到大三学习操作系统的时候，
才会明白栈与堆、内存管理等更深层次的含义。但是，在明白这些概念之前不会妨碍你利用C++做一些事情，
比如写一个简单的XML Parser。
这个时候，你应该会发现很多问题，如效率，代码规范等，
这个时候，你可以研究Effective C++，Google C++ Code Standard等，
只有自己犯了错，回过头反省才会更加深刻。随后，你可以更加深刻的去思考C++，
你需要阅读《The Design and Evolution of C++》。这本书的阅读，会教会你很多，是对你影响最大的C++书籍。

如果你对C++编译器的一些细节有兴趣，深入C++对象模型可以推荐。
如果你对STL的一些实现有兴趣，可以去翻翻STL源代码（很多人推荐STL源码剖析，但是我没有阅读过，
我没有办法发表是否应该推荐的观点，列出来供你自行判断是否应该阅读）。

到这一步骤，我想你应该可以称为C++ Programmer了，剩下的就是实践中发现问题，然后补足自己。


此外，由于C++博大精深，应用的范围多如牛毛，特定方向所需要的知识未列举。
比如你要研究Android的NDK什么的，那就是属于你后面的事情了。
计算机的世界不仅计算机编程语言，与之相关的还有操作系统、数据结构、编译原理、计算机网络等知识